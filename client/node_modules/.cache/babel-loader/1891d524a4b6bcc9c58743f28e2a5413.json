{"ast":null,"code":"import { goodreadsConfig } from './config';\nexport const fetchBookDetails = async search => {\n  let result = {};\n  const callAPI = await fetch(\"https://www.goodreads.com/book/show/\".concat(search, \".xml?key=\").concat(goodreadsConfig.apiKey));\n  const response = await callAPI.text();\n  const res = new window.DOMParser().parseFromString(response, 'text/xml');\n  const data = res.getElementsByTagName('GoodreadsResponse')[0].children[1].children;\n  result['id'] = data[0].textContent;\n  result['title'] = data[1].textContent;\n  result['smallImage'] = data[9].textContent;\n  result['image'] = data[8].textContent;\n  result['publicationYear'] = data[10].textContent;\n  result['rating'] = data[18].textContent;\n  result['author'] = data[26].children[0].children[1].textContent;\n  result['description'] = data[16].textContent;\n  return result;\n};\nexport const fetchBookDescription = async search => {\n  const callAPI = await fetch(\"https://www.goodreads.com/book/show/\".concat(search, \".xml?key=\").concat(goodreadsConfig.apiKey));\n  const response = await callAPI.text();\n  const res = new window.DOMParser().parseFromString(response, 'text/xml');\n  const data = res.getElementsByTagName('GoodreadsResponse')[0].children[1].children;\n  let details = {\n    description: data[16].textContent,\n    isbn: data[3].textContent\n  };\n  return details;\n};","map":{"version":3,"sources":["/home/kaerah/Projects/book-review-app/client/src/components/api/fetchBookDetails.js"],"names":["goodreadsConfig","fetchBookDetails","search","result","callAPI","fetch","apiKey","response","text","res","window","DOMParser","parseFromString","data","getElementsByTagName","children","textContent","fetchBookDescription","details","description","isbn"],"mappings":"AAAA,SAASA,eAAT,QAAgC,UAAhC;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAMC,MAAN,IAAgB;AAC9C,MAAIC,MAAM,GAAG,EAAb;AACA,QAAMC,OAAO,GAAG,MAAMC,KAAK,+CACcH,MADd,sBAEvBF,eAAe,CAACM,MAFO,EAA3B;AAKA,QAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,IAAR,EAAvB;AACA,QAAMC,GAAG,GAAG,IAAIC,MAAM,CAACC,SAAX,GAAuBC,eAAvB,CAAuCL,QAAvC,EAAiD,UAAjD,CAAZ;AACA,QAAMM,IAAI,GAAGJ,GAAG,CAACK,oBAAJ,CAAyB,mBAAzB,EAA8C,CAA9C,EAAiDC,QAAjD,CAA0D,CAA1D,EACVA,QADH;AAEAZ,EAAAA,MAAM,CAAC,IAAD,CAAN,GAAeU,IAAI,CAAC,CAAD,CAAJ,CAAQG,WAAvB;AACAb,EAAAA,MAAM,CAAC,OAAD,CAAN,GAAkBU,IAAI,CAAC,CAAD,CAAJ,CAAQG,WAA1B;AACAb,EAAAA,MAAM,CAAC,YAAD,CAAN,GAAuBU,IAAI,CAAC,CAAD,CAAJ,CAAQG,WAA/B;AACAb,EAAAA,MAAM,CAAC,OAAD,CAAN,GAAkBU,IAAI,CAAC,CAAD,CAAJ,CAAQG,WAA1B;AACAb,EAAAA,MAAM,CAAC,iBAAD,CAAN,GAA4BU,IAAI,CAAC,EAAD,CAAJ,CAASG,WAArC;AACAb,EAAAA,MAAM,CAAC,QAAD,CAAN,GAAmBU,IAAI,CAAC,EAAD,CAAJ,CAASG,WAA5B;AACAb,EAAAA,MAAM,CAAC,QAAD,CAAN,GAAmBU,IAAI,CAAC,EAAD,CAAJ,CAASE,QAAT,CAAkB,CAAlB,EAAqBA,QAArB,CAA8B,CAA9B,EAAiCC,WAApD;AACAb,EAAAA,MAAM,CAAC,aAAD,CAAN,GAAwBU,IAAI,CAAC,EAAD,CAAJ,CAASG,WAAjC;AAEA,SAAOb,MAAP;AACD,CArBM;AAuBP,OAAO,MAAMc,oBAAoB,GAAG,MAAMf,MAAN,IAAgB;AAClD,QAAME,OAAO,GAAG,MAAMC,KAAK,+CACcH,MADd,sBAEvBF,eAAe,CAACM,MAFO,EAA3B;AAKA,QAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,IAAR,EAAvB;AACA,QAAMC,GAAG,GAAG,IAAIC,MAAM,CAACC,SAAX,GAAuBC,eAAvB,CAAuCL,QAAvC,EAAiD,UAAjD,CAAZ;AACA,QAAMM,IAAI,GAAGJ,GAAG,CAACK,oBAAJ,CAAyB,mBAAzB,EAA8C,CAA9C,EAAiDC,QAAjD,CAA0D,CAA1D,EACVA,QADH;AAGA,MAAIG,OAAO,GAAG;AACZC,IAAAA,WAAW,EAAEN,IAAI,CAAC,EAAD,CAAJ,CAASG,WADV;AAEZI,IAAAA,IAAI,EAAEP,IAAI,CAAC,CAAD,CAAJ,CAAQG;AAFF,GAAd;AAIA,SAAOE,OAAP;AACD,CAhBM","sourcesContent":["import { goodreadsConfig } from './config';\nexport const fetchBookDetails = async search => {\n  let result = {};\n  const callAPI = await fetch(\n    `https://www.goodreads.com/book/show/${search}.xml?key=${\n      goodreadsConfig.apiKey\n    }`\n  );\n  const response = await callAPI.text();\n  const res = new window.DOMParser().parseFromString(response, 'text/xml');\n  const data = res.getElementsByTagName('GoodreadsResponse')[0].children[1]\n    .children;\n  result['id'] = data[0].textContent;\n  result['title'] = data[1].textContent;\n  result['smallImage'] = data[9].textContent;\n  result['image'] = data[8].textContent;\n  result['publicationYear'] = data[10].textContent;\n  result['rating'] = data[18].textContent;\n  result['author'] = data[26].children[0].children[1].textContent;\n  result['description'] = data[16].textContent;\n\n  return result;\n};\n\nexport const fetchBookDescription = async search => {\n  const callAPI = await fetch(\n    `https://www.goodreads.com/book/show/${search}.xml?key=${\n      goodreadsConfig.apiKey\n    }`\n  );\n  const response = await callAPI.text();\n  const res = new window.DOMParser().parseFromString(response, 'text/xml');\n  const data = res.getElementsByTagName('GoodreadsResponse')[0].children[1]\n    .children;\n\n  let details = {\n    description: data[16].textContent,\n    isbn: data[3].textContent\n  };\n  return details;\n};\n"]},"metadata":{},"sourceType":"module"}